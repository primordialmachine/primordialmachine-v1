# AppVeyor configuration for AppVeyor project "primordialmachine".
clone_depth: 1

# Build worker image (VM template).
image: Visual Studio 2022

# Build branch "master" only.
branches:
  only:
    - master

# Build platform "x64" and "x86".
platform:
    - x64
    - x86

# Build configurations "Debug" and "Release".
configuration:
    - Release
    - Debug

build:
    parallel: true                       # enable MSBuild parallel builds
    project: Ring1/Ring1.sln             # path to Visual Studio solution or project

# If one matrix entry fails, all entries fails (https://www.appveyor.com/docs/build-configuration#failing-strategy).
matrix:
    fast_finish: true

artifacts:
    # Ring1.Atom.Test
    - path: ring1\products\$(platform)\$(configuration)\Ring1.Atom.Test\Ring1.Atom.Test.exe
      name: Ring1.Atom.Test-$(platform)-$(configuration).exe
    # Ring1.Intrinsic.Test
    - path: ring1\products\$(platform)\$(configuration)\Ring1.Intrinsic.Test\Ring1.Intrinsic.Test.exe
      name: Ring1.Intrinsic.Test-$(platform)-$(configuration).exe

# Execute test scripts.
test_script:
    - ps: |
          $name = 'Ring1.Intrinsic.Test';
          $prefix = "${env:appveyor_build_folder}\Ring1\products\${env:platform}\${env:configuration}\Ring1.Intrinsic.Test";
          $suffix = 'Ring1.Intrinsic.Test.exe';
          [int]$startMs = (Get-Date).Millisecond
          cd ${prefix}
          Invoke-Expression "./${suffix}"
          $code = $LastExitCode
          [int]$endMs = (Get-Date).Millisecond
          if ($code -eq 0) {
            Add-AppveyorTest -Name ${name} -Filename "${prefix}\${suffix}" -Outcome Passed -Duration $($endMs - $startMs);
          } else {
            Add-AppveyorTest -Name ${name} -Filename "${prefix}\${suffix}" -Outcome Failed -Duration $($endMs - $startMs);
          }

    - ps: |
          $name = 'Ring1.Atom.Test';
          $prefix = "${env:appveyor_build_folder}\Ring1\products\${env:platform}\${env:configuration}\Ring1.Atom.Test";
          $suffix = 'Ring1.Atom.Test.exe';
          [int]$startMs = (Get-Date).Millisecond
          cd ${prefix}
          Invoke-Expression "./${suffix}"
          $code = $LastExitCode
          [int]$endMs = (Get-Date).Millisecond
          if ($code -eq 0) {
            Add-AppveyorTest -Name ${name} -Filename "${prefix}\${suffix}" -Outcome Passed -Duration $($endMs - $startMs);
          } else {
            Add-AppveyorTest -Name ${name} -Filename "${prefix}\${suffix}" -Outcome Failed -Duration $($endMs - $startMs);
          }

